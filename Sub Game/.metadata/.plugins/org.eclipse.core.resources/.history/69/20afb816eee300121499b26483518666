package com.application.subgame;

import java.io.File;

import android.hardware.Sensor;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.app.Activity;
import android.util.Log;
import android.view.Display;
import android.view.Window;
import android.view.WindowManager;

public class MainActivity extends Activity{
	
	private static final String TAG = MainActivity.class.getSimpleName();
	private SensorManager senManager;
	private MainGamePanel mainGame;
	private Display display;
	private File save;
	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        while (save != null){
	        try{
	        File f = this.getFilesDir();
	        String s = f.getCanonicalPath();
	        save = new File(s+"/saveGame.txt");
	        if (!save.exists()){
	        	//Log.d(TAG,"dette skal bare skje første gange...");
	        	save.createNewFile();
	        	}
	        }
	        catch(Exception e){};
        }
        if (save == null){
        	Log.d(TAG,"loldritt bæsj tiss promp");
        }

        this.senManager = (SensorManager) getSystemService(SENSOR_SERVICE);
        this.display = getWindowManager().getDefaultDisplay();
        this.mainGame = new MainGamePanel(this,display,save); 
        this.mainGame.setKeepScreenOn(true);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        setContentView(mainGame);
    }

    
    public void onDestroy(){
    	Log.d(TAG,"destroying...");
    	mainGame.getGame().getPlayer().saveGame();
    	this.senManager.unregisterListener(mainGame);
    	super.onDestroy();
    }
    
    public void onStop(){
    	this.senManager.unregisterListener(mainGame);
    	Log.d(TAG,"Stopping...");
    	super.onStop();
    }
    
    public void onPause(){
    	this.senManager.unregisterListener(mainGame);
    	this.mainGame.surfaceDestroyed(mainGame.getHolder());
    	Log.d(TAG,"pauseing...");
    	if (this.mainGame.getState() == GameStates.game){
    		this.mainGame.setState(GameStates.pause);
    	}
    	super.onPause();
    	
    }
    
    public void onResume(){
    	this.senManager.registerListener(mainGame, senManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER),SensorManager.SENSOR_DELAY_GAME);
    	Log.d(TAG,"resuming,...");
    	super.onResume();
    }
    
    public void onStart(){
    	this.senManager.registerListener(mainGame, senManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER),SensorManager.SENSOR_DELAY_GAME);
    	super.onStart();
    }
}
